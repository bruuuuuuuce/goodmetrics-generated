/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: proto/metrics/goodmetrics.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace goodmetrics {
    export class MetricsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shared_dimensions?: Map<string, Dimension>;
            metrics?: Datum[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shared_dimensions" in data && data.shared_dimensions != undefined) {
                    this.shared_dimensions = data.shared_dimensions;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
            }
            if (!this.shared_dimensions)
                this.shared_dimensions = new Map();
        }
        get shared_dimensions() {
            return pb_1.Message.getField(this, 1) as any as Map<string, Dimension>;
        }
        set shared_dimensions(value: Map<string, Dimension>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, Datum, 2) as Datum[];
        }
        set metrics(value: Datum[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            shared_dimensions?: {
                [key: string]: ReturnType<typeof Dimension.prototype.toObject>;
            };
            metrics?: ReturnType<typeof Datum.prototype.toObject>[];
        }): MetricsRequest {
            const message = new MetricsRequest({});
            if (typeof data.shared_dimensions == "object") {
                message.shared_dimensions = new Map(Object.entries(data.shared_dimensions).map(([key, value]) => [key, Dimension.fromObject(value)]));
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => Datum.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                shared_dimensions?: {
                    [key: string]: ReturnType<typeof Dimension.prototype.toObject>;
                };
                metrics?: ReturnType<typeof Datum.prototype.toObject>[];
            } = {};
            if (this.shared_dimensions != null) {
                data.shared_dimensions = (Object.fromEntries)((Array.from)(this.shared_dimensions).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: Datum) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.shared_dimensions) {
                writer.writeMessage(1, this.shared_dimensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.metrics.length)
                writer.writeRepeatedMessage(2, this.metrics, (item: Datum) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MetricsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MetricsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.shared_dimensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Dimension.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 2:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Datum.deserialize(reader), Datum));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MetricsRequest {
            return MetricsRequest.deserialize(bytes);
        }
    }
    export class MetricsReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MetricsReply {
            const message = new MetricsReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MetricsReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MetricsReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MetricsReply {
            return MetricsReply.deserialize(bytes);
        }
    }
    export class Datum extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            unix_nanos?: number;
            dimensions?: Map<string, Dimension>;
            measurements?: Map<string, Measurement>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("unix_nanos" in data && data.unix_nanos != undefined) {
                    this.unix_nanos = data.unix_nanos;
                }
                if ("dimensions" in data && data.dimensions != undefined) {
                    this.dimensions = data.dimensions;
                }
                if ("measurements" in data && data.measurements != undefined) {
                    this.measurements = data.measurements;
                }
            }
            if (!this.dimensions)
                this.dimensions = new Map();
            if (!this.measurements)
                this.measurements = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get unix_nanos() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set unix_nanos(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get dimensions() {
            return pb_1.Message.getField(this, 3) as any as Map<string, Dimension>;
        }
        set dimensions(value: Map<string, Dimension>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get measurements() {
            return pb_1.Message.getField(this, 4) as any as Map<string, Measurement>;
        }
        set measurements(value: Map<string, Measurement>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        static fromObject(data: {
            metric?: string;
            unix_nanos?: number;
            dimensions?: {
                [key: string]: ReturnType<typeof Dimension.prototype.toObject>;
            };
            measurements?: {
                [key: string]: ReturnType<typeof Measurement.prototype.toObject>;
            };
        }): Datum {
            const message = new Datum({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (data.unix_nanos != null) {
                message.unix_nanos = data.unix_nanos;
            }
            if (typeof data.dimensions == "object") {
                message.dimensions = new Map(Object.entries(data.dimensions).map(([key, value]) => [key, Dimension.fromObject(value)]));
            }
            if (typeof data.measurements == "object") {
                message.measurements = new Map(Object.entries(data.measurements).map(([key, value]) => [key, Measurement.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                unix_nanos?: number;
                dimensions?: {
                    [key: string]: ReturnType<typeof Dimension.prototype.toObject>;
                };
                measurements?: {
                    [key: string]: ReturnType<typeof Measurement.prototype.toObject>;
                };
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.unix_nanos != null) {
                data.unix_nanos = this.unix_nanos;
            }
            if (this.dimensions != null) {
                data.dimensions = (Object.fromEntries)((Array.from)(this.dimensions).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.measurements != null) {
                data.measurements = (Object.fromEntries)((Array.from)(this.measurements).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            if (this.unix_nanos != 0)
                writer.writeUint64(2, this.unix_nanos);
            for (const [key, value] of this.dimensions) {
                writer.writeMessage(3, this.dimensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.measurements) {
                writer.writeMessage(4, this.measurements, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Datum {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Datum();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        message.unix_nanos = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.dimensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Dimension.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.measurements as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Measurement.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Datum {
            return Datum.deserialize(bytes);
        }
    }
    export class Dimension extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            string?: string;
            number?: never;
            boolean?: never;
        } | {
            string?: never;
            number?: number;
            boolean?: never;
        } | {
            string?: never;
            number?: never;
            boolean?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("string" in data && data.string != undefined) {
                    this.string = data.string;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("boolean" in data && data.boolean != undefined) {
                    this.boolean = data.boolean;
                }
            }
        }
        get string() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set string(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_string() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_number() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get boolean() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set boolean(value: boolean) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_boolean() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "string" | "number" | "boolean";
            } = {
                0: "none",
                1: "string",
                2: "number",
                3: "boolean"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            string?: string;
            number?: number;
            boolean?: boolean;
        }): Dimension {
            const message = new Dimension({});
            if (data.string != null) {
                message.string = data.string;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.boolean != null) {
                message.boolean = data.boolean;
            }
            return message;
        }
        toObject() {
            const data: {
                string?: string;
                number?: number;
                boolean?: boolean;
            } = {};
            if (this.string != null) {
                data.string = this.string;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.boolean != null) {
                data.boolean = this.boolean;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_string)
                writer.writeString(1, this.string);
            if (this.has_number)
                writer.writeUint64(2, this.number);
            if (this.has_boolean)
                writer.writeBool(3, this.boolean);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Dimension {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Dimension();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.string = reader.readString();
                        break;
                    case 2:
                        message.number = reader.readUint64();
                        break;
                    case 3:
                        message.boolean = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Dimension {
            return Dimension.deserialize(bytes);
        }
    }
    export class Measurement extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 4, 5, 6, 7]];
        constructor(data?: any[] | ({} & (({
            i64?: number;
            i32?: never;
            f64?: never;
            f32?: never;
            statistic_set?: never;
            histogram?: never;
        } | {
            i64?: never;
            i32?: number;
            f64?: never;
            f32?: never;
            statistic_set?: never;
            histogram?: never;
        } | {
            i64?: never;
            i32?: never;
            f64?: number;
            f32?: never;
            statistic_set?: never;
            histogram?: never;
        } | {
            i64?: never;
            i32?: never;
            f64?: never;
            f32?: number;
            statistic_set?: never;
            histogram?: never;
        } | {
            i64?: never;
            i32?: never;
            f64?: never;
            f32?: never;
            statistic_set?: StatisticSet;
            histogram?: never;
        } | {
            i64?: never;
            i32?: never;
            f64?: never;
            f32?: never;
            statistic_set?: never;
            histogram?: Histogram;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("i64" in data && data.i64 != undefined) {
                    this.i64 = data.i64;
                }
                if ("i32" in data && data.i32 != undefined) {
                    this.i32 = data.i32;
                }
                if ("f64" in data && data.f64 != undefined) {
                    this.f64 = data.f64;
                }
                if ("f32" in data && data.f32 != undefined) {
                    this.f32 = data.f32;
                }
                if ("statistic_set" in data && data.statistic_set != undefined) {
                    this.statistic_set = data.statistic_set;
                }
                if ("histogram" in data && data.histogram != undefined) {
                    this.histogram = data.histogram;
                }
            }
        }
        get i64() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set i64(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_i64() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get i32() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set i32(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_i32() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get f64() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set f64(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_f64() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get f32() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set f32(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_f32() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get statistic_set() {
            return pb_1.Message.getWrapperField(this, StatisticSet, 6) as StatisticSet;
        }
        set statistic_set(value: StatisticSet) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_statistic_set() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get histogram() {
            return pb_1.Message.getWrapperField(this, Histogram, 7) as Histogram;
        }
        set histogram(value: Histogram) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_histogram() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "i64" | "i32" | "f64" | "f32" | "statistic_set" | "histogram";
            } = {
                0: "none",
                1: "i64",
                2: "i32",
                4: "f64",
                5: "f32",
                6: "statistic_set",
                7: "histogram"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            i64?: number;
            i32?: number;
            f64?: number;
            f32?: number;
            statistic_set?: ReturnType<typeof StatisticSet.prototype.toObject>;
            histogram?: ReturnType<typeof Histogram.prototype.toObject>;
        }): Measurement {
            const message = new Measurement({});
            if (data.i64 != null) {
                message.i64 = data.i64;
            }
            if (data.i32 != null) {
                message.i32 = data.i32;
            }
            if (data.f64 != null) {
                message.f64 = data.f64;
            }
            if (data.f32 != null) {
                message.f32 = data.f32;
            }
            if (data.statistic_set != null) {
                message.statistic_set = StatisticSet.fromObject(data.statistic_set);
            }
            if (data.histogram != null) {
                message.histogram = Histogram.fromObject(data.histogram);
            }
            return message;
        }
        toObject() {
            const data: {
                i64?: number;
                i32?: number;
                f64?: number;
                f32?: number;
                statistic_set?: ReturnType<typeof StatisticSet.prototype.toObject>;
                histogram?: ReturnType<typeof Histogram.prototype.toObject>;
            } = {};
            if (this.i64 != null) {
                data.i64 = this.i64;
            }
            if (this.i32 != null) {
                data.i32 = this.i32;
            }
            if (this.f64 != null) {
                data.f64 = this.f64;
            }
            if (this.f32 != null) {
                data.f32 = this.f32;
            }
            if (this.statistic_set != null) {
                data.statistic_set = this.statistic_set.toObject();
            }
            if (this.histogram != null) {
                data.histogram = this.histogram.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_i64)
                writer.writeInt64(1, this.i64);
            if (this.has_i32)
                writer.writeInt32(2, this.i32);
            if (this.has_f64)
                writer.writeDouble(4, this.f64);
            if (this.has_f32)
                writer.writeFloat(5, this.f32);
            if (this.has_statistic_set)
                writer.writeMessage(6, this.statistic_set, () => this.statistic_set.serialize(writer));
            if (this.has_histogram)
                writer.writeMessage(7, this.histogram, () => this.histogram.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Measurement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Measurement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.i64 = reader.readInt64();
                        break;
                    case 2:
                        message.i32 = reader.readInt32();
                        break;
                    case 4:
                        message.f64 = reader.readDouble();
                        break;
                    case 5:
                        message.f32 = reader.readFloat();
                        break;
                    case 6:
                        reader.readMessage(message.statistic_set, () => message.statistic_set = StatisticSet.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.histogram, () => message.histogram = Histogram.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Measurement {
            return Measurement.deserialize(bytes);
        }
    }
    export class StatisticSet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            minimum?: number;
            maximum?: number;
            samplesum?: number;
            samplecount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("minimum" in data && data.minimum != undefined) {
                    this.minimum = data.minimum;
                }
                if ("maximum" in data && data.maximum != undefined) {
                    this.maximum = data.maximum;
                }
                if ("samplesum" in data && data.samplesum != undefined) {
                    this.samplesum = data.samplesum;
                }
                if ("samplecount" in data && data.samplecount != undefined) {
                    this.samplecount = data.samplecount;
                }
            }
        }
        get minimum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set minimum(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get maximum() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set maximum(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get samplesum() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set samplesum(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get samplecount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set samplecount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            minimum?: number;
            maximum?: number;
            samplesum?: number;
            samplecount?: number;
        }): StatisticSet {
            const message = new StatisticSet({});
            if (data.minimum != null) {
                message.minimum = data.minimum;
            }
            if (data.maximum != null) {
                message.maximum = data.maximum;
            }
            if (data.samplesum != null) {
                message.samplesum = data.samplesum;
            }
            if (data.samplecount != null) {
                message.samplecount = data.samplecount;
            }
            return message;
        }
        toObject() {
            const data: {
                minimum?: number;
                maximum?: number;
                samplesum?: number;
                samplecount?: number;
            } = {};
            if (this.minimum != null) {
                data.minimum = this.minimum;
            }
            if (this.maximum != null) {
                data.maximum = this.maximum;
            }
            if (this.samplesum != null) {
                data.samplesum = this.samplesum;
            }
            if (this.samplecount != null) {
                data.samplecount = this.samplecount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.minimum != 0)
                writer.writeDouble(1, this.minimum);
            if (this.maximum != 0)
                writer.writeDouble(2, this.maximum);
            if (this.samplesum != 0)
                writer.writeDouble(3, this.samplesum);
            if (this.samplecount != 0)
                writer.writeInt64(4, this.samplecount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatisticSet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatisticSet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.minimum = reader.readDouble();
                        break;
                    case 2:
                        message.maximum = reader.readDouble();
                        break;
                    case 3:
                        message.samplesum = reader.readDouble();
                        break;
                    case 4:
                        message.samplecount = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatisticSet {
            return StatisticSet.deserialize(bytes);
        }
    }
    export class Histogram extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            buckets?: Map<number, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("buckets" in data && data.buckets != undefined) {
                    this.buckets = data.buckets;
                }
            }
            if (!this.buckets)
                this.buckets = new Map();
        }
        get buckets() {
            return pb_1.Message.getField(this, 1) as any as Map<number, number>;
        }
        set buckets(value: Map<number, number>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            buckets?: {
                [key: number]: number;
            };
        }): Histogram {
            const message = new Histogram({});
            if (typeof data.buckets == "object") {
                message.buckets = new Map(Object.entries(data.buckets).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                buckets?: {
                    [key: number]: number;
                };
            } = {};
            if (this.buckets != null) {
                data.buckets = (Object.fromEntries)(this.buckets);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.buckets) {
                writer.writeMessage(1, this.buckets, () => {
                    writer.writeInt64(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Histogram {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Histogram();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.buckets as any, reader, reader.readInt64, reader.readInt64));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Histogram {
            return Histogram.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMetricsService {
        static definition = {
            SendMetrics: {
                path: "/goodmetrics.Metrics/SendMetrics",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MetricsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MetricsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MetricsReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MetricsReply.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SendMetrics(call: grpc_1.ServerUnaryCall<MetricsRequest, MetricsReply>, callback: grpc_1.sendUnaryData<MetricsReply>): void;
    }
    export class MetricsClient extends grpc_1.makeGenericClientConstructor(UnimplementedMetricsService.definition, "Metrics", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SendMetrics: GrpcUnaryServiceInterface<MetricsRequest, MetricsReply> = (message: MetricsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MetricsReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MetricsReply>, callback?: grpc_1.requestCallback<MetricsReply>): grpc_1.ClientUnaryCall => {
            return super.SendMetrics(message, metadata, options, callback);
        };
    }
}
